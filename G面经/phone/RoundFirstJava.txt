class SynonymPairsCheck{
  private HashMap<String, String> parentMap = new HashMap<>();

  public void constructMap(ArrayList<String[]>> synonymPairs) {
    for (String[] pair: synonymPairs) {
      parentMap.put(pair[0], pair[0]);
      parentMap.put(pair[1], pair[1]);
    }

    for (String[] pair: synonymPairs) {
      union(pair[0], pair[1]);
    }
  }

  public String find(String x) {
    if (!x.equals(parentMap.get(x))) {
      parentMap.put(x, find(parentMap.get(x)));
    }
    return parentMap.get(x);
  }

  public void union(String x, String y) {
    String parentX = parentMap.get(x);
    String parentY = parentMap.get(y);
    if (!parentX.equals(parentY)) {
      parentMap.put(x, parentY);
    }
  }

  public List<Boolean> checkQueries (ArrayList<String[]>> queries) {
   List<Boolean> res = new ArrayList<>();
   for (String[] query: queries) {
        String str1 = query[0];
        String str2 = query[1];
        if (str1.length() != str2.length()) return false;
        String[] str1Words = str1.split(" ");
        String[] str2Words = str2.split(" ");
        int index = 0;
        for (int i = 0; i <  str1Words.length; i++) {
          if (!parentMap.containsKey(str1Words[i]) || !parentMap.containsKey(str2Words[i]))  {
            if (!str1Words[i].equals(str2Words[i])) {
              res.add(False); //想不起来是不是new False还是直接False。。。就先写成了这样
              index = i;
              break;
            }
          }else {  // current two words are in map, see if they have same parent
            if (!parentMap.get(str1Words[i]).equals(parentMap.get(str2Words[i]))) {
              res.add(Flase);
              index = i;
              break;
            }
          }

        }
        if (index == 0) {
          res.add(True);
        }
      }
    return res;
    }
}
