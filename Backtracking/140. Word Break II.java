Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

/*
Recursion with memorization
思路跟131 比较像。
但这个是break by word所以不用go through each char，用startWith（word）方便一些
加了Map memorization，dfs需要return的就是结果了
*/
class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
      HashMap<String, List<String>> map = new HashMap<>();
      return dfs(s, wordDict,map);
    }

    // dfs return all possible sentences generated by s
    public List<String> dfs(String s, List<String> wordDict, HashMap<String, List<String>> map){
      if(map.containsKey(s)){
        return map.get(s);
      }
      //每层dfs都自己新建了一个res list，所以不用像其他题一样回到上一层时remove last one
      List<String> res = new LinkedList<>();
      if(s.length()==0){
        res.add("");
        return res;
      }

      for(String word:wordDict){
        if(s.startsWith(word)){
          List<String> subList = dfs(s.substring(word.length()), wordDict, map);
          for(String sentence: subList){
            res.add(word + (sentence.length()==0?"":" ") + sentence);
          }
        }
      }
      map.put(s,res);
      return res;

    }
}
